webpackHotUpdate_N_E("pages/index",{

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./node_modules/next/dist/compiled/resolve-url-loader/index.js?!./node_modules/next/dist/compiled/sass-loader/cjs.js?!./components/EmailSignup.module.scss":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** (webpack)/css-loader/cjs.js??ref--5-oneOf-3-1!(webpack)/postcss-loader/cjs.js??ref--5-oneOf-3-2!(webpack)/resolve-url-loader??ref--5-oneOf-3-3!(webpack)/sass-loader/cjs.js??ref--5-oneOf-3-4!./components/EmailSignup.module.scss ***!
  \******************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);
// Module
___CSS_LOADER_EXPORT___.push([module.i, ".EmailSignup_btn__1ScSb {\n  transition: background-color 0.3s ease-in-out;\n  border-radius: 6px;\n  min-width: 120px;\n  padding: 16px 24px;\n  text-align: center;\n  font-size: 16px;\n  line-height: 1;\n  font-weight: 500;\n  color: #fff;\n  -webkit-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  cursor: pointer;\n}\n\n.EmailSignup_btn-large__39pco {\n  border-radius: 8px;\n  padding: 21px 32px;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.EmailSignup_btn-primary__2HhjF {\n  background-color: #0070f0;\n}\n.EmailSignup_btn-primary__2HhjF:hover {\n  background-color: #005dd6;\n}\n\n.EmailSignup_btn-disabled__1ztqa {\n  background-color: #f2f2f2;\n  color: #a6a6a6;\n}\n.EmailSignup_btn-disabled__1ztqa:hover {\n  background-color: #f2f2f2;\n}\n\n.EmailSignup_dividerHorizontal__2kLmV {\n  border-radius: 50%;\n  width: 100%;\n  height: 1px;\n  background-color: #e5e5e5;\n}\n\n.EmailSignup_formContent__3sTBZ {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.EmailSignup_formContent__3sTBZ .EmailSignup_fieldRow__6Byn8 {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  width: 100%;\n}\n.EmailSignup_formContent__3sTBZ .EmailSignup_fieldRow__6Byn8 .EmailSignup_textInputHalf__1BPQV:first-child {\n  margin-right: 12px;\n}\n.EmailSignup_formContent__3sTBZ .EmailSignup_fieldRow__6Byn8 .EmailSignup_textInputHalf__1BPQV:last-child {\n  margin-left: 12px;\n}\n.EmailSignup_formContent__3sTBZ button {\n  outline: 0;\n  border: 0;\n  width: 100%;\n  max-width: 392px;\n}\n\n.EmailSignup_textInputHalf__1BPQV {\n  max-width: 184px;\n}\n\n.EmailSignup_textInputFull__JCqRK {\n  width: 100%;\n}\n\n.EmailSignup_textInputHalf__1BPQV label,\n.EmailSignup_textInputFull__JCqRK label {\n  color: #666;\n  padding-top: 0;\n  font-size: 14px;\n  line-height: 1.3;\n  font-weight: 500;\n}\n.EmailSignup_textInputHalf__1BPQV input,\n.EmailSignup_textInputFull__JCqRK input {\n  transition: all 0.3s ease-in-out;\n  margin-top: 6px;\n  border: solid 1px #d9d9d9;\n  border-radius: 4px;\n  width: 100%;\n  padding: 10px 16px;\n  font-size: 16px;\n  line-height: 1.25;\n  color: #0d0d0d;\n}\n.EmailSignup_textInputHalf__1BPQV input:hover,\n.EmailSignup_textInputFull__JCqRK input:hover {\n  border-color: #0070f0;\n}\n.EmailSignup_textInputHalf__1BPQV input:focus,\n.EmailSignup_textInputFull__JCqRK input:focus {\n  outline: none;\n  box-shadow: 0 0 0 4px rgba(0, 112, 240, 0.2);\n  border-color: #0070f0;\n}\n.EmailSignup_textInputHalf__1BPQV input:-ms-input-placeholder, .EmailSignup_textInputFull__JCqRK input:-ms-input-placeholder {\n  color: #a6a6a6;\n}\n.EmailSignup_textInputHalf__1BPQV input::placeholder,\n.EmailSignup_textInputFull__JCqRK input::placeholder {\n  color: #a6a6a6;\n}\n\n.EmailSignup_bookDemoForm__bXP2f {\n  display: flex;\n  justify-content: center;\n  margin-top: 160px;\n}\n.EmailSignup_bookDemoForm__bXP2f .EmailSignup_floatingPanel__X8p5- {\n  flex-grow: 1;\n  margin: 0 auto;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.1);\n  border: solid 1px #d9d9d9;\n  border-radius: 6px;\n  max-width: 100vw;\n  padding: 64px 40px;\n  background-color: #fff;\n}\n@media (max-width: 320px) {\n  .EmailSignup_bookDemoForm__bXP2f .EmailSignup_floatingPanel__X8p5- {\n    box-shadow: unset;\n    border: none;\n  }\n}\n.EmailSignup_bookDemoForm__bXP2f .EmailSignup_floatingPanel__X8p5- h5 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  text-align: center;\n  font-size: 28px;\n  line-height: 1.3;\n  font-weight: 600;\n}\n.EmailSignup_bookDemoForm__bXP2f .EmailSignup_floatingPanel__X8p5- p {\n  margin-top: 0;\n  margin-bottom: 24px;\n  text-align: center;\n  color: #666;\n}", "",{"version":3,"sources":["webpack://../styles/buttons.scss","webpack://EmailSignup.module.scss","webpack://../styles/variables.scss","webpack://../styles/components.scss","webpack://../node_modules/include-media/dist/_include-media.scss"],"names":[],"mappings":"AAIA;EACE,6CAAA;EACA,kBAAA;EACA,gBAAA;EACA,kBAAA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;EACA,gBAAA;EACA,WAAA;EAEA,yBAAA;MAAA,qBAAA;UAAA,iBAAA;EACA,eAAA;ACJF;;ADSA;EACE,kBAAA;EACA,kBAAA;EACA,eAAA;EACA,gBAAA;ACNF;;ADWA;EACE,yBE7Ba;ADqBf;ADUE;EACE,yBE/BQ;ADuBZ;;ADYA;EACE,yBAAA;EACA,cAAA;ACTF;ADWE;EACE,yBAAA;ACTJ;;AE9BA;EACE,kBAAA;EACA,WAAA;EACA,WAAA;EACA,yBAAA;AFiCF;;AAtCA;EACE,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AAyCF;AAvCE;EACE,aAAA;EACA,8BAAA;EACA,mBAAA;EACA,WAAA;AAyCJ;AAvCI;EACE,kBAAA;AAyCN;AAtCI;EACE,iBAAA;AAwCN;AApCE;EACE,UAAA;EACA,SAAA;EACA,WAAA;EACA,gBAAA;AAsCJ;;AAlCA;EACE,gBAAA;AAqCF;;AAlCA;EACE,WAAA;AAqCF;;AAhCE;;EACE,WCtCG;EDuCH,cAAA;EACA,eAAA;EACA,gBAAA;EACA,gBAAA;AAoCJ;AAjCE;;EACE,gCAAA;EACA,eAAA;EACA,yBAAA;EACA,kBAAA;EACA,WAAA;EACA,kBAAA;EACA,eAAA;EACA,iBAAA;EACA,cCvDI;AD2FR;AAlCI;;EACE,qBC5DS;ADiGf;AAlCI;;EACE,aAAA;EACA,4CAAA;EACA,qBClES;ADuGf;AAlCI;EACE,cAAA;AAqCN;AAtCI;;EACE,cAAA;AAqCN;;AAhCA;EACE,aAAA;EACA,uBAAA;EACA,iBAAA;AAmCF;AAjCE;EACE,YAAA;EACA,cAAA;EACA,0CAAA;EACA,yBAAA;EACA,kBAAA;EACA,gBAAA;EACA,kBAAA;EACA,sBAAA;AAmCJ;AGobI;EH/dF;IAWI,iBAAA;IACA,YAAA;EAoCJ;AACF;AAlCI;EACE,aAAA;EACA,mBAAA;EACA,kBAAA;EACA,eAAA;EACA,gBAAA;EACA,gBAAA;AAoCN;AAjCI;EACE,aAAA;EACA,mBAAA;EACA,kBAAA;EACA,WCzGC;AD4IP","sourcesContent":["@import 'index';\n\n// Base\n\n.btn {\n  transition: background-color 0.3s ease-in-out;\n  border-radius: 6px;\n  min-width: 120px;\n  padding: 16px 24px;\n  text-align: center;\n  font-size: 16px;\n  line-height: 1;\n  font-weight: 500;\n  color: #fff;\n\n  user-select: none;\n  cursor: pointer;\n}\n\n// Size\n\n.btn-large {\n  border-radius: 8px;\n  padding: 21px 32px;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n// Primary\n\n.btn-primary {\n  background-color: $primary-blue;\n\n  &:hover {\n    background-color: $dark-blue;\n  }\n}\n\n.btn-disabled {\n  background-color: #f2f2f2;\n  color: #a6a6a6;\n\n  &:hover {\n    background-color: #f2f2f2;\n  }\n}\n",".btn {\n  transition: background-color 0.3s ease-in-out;\n  border-radius: 6px;\n  min-width: 120px;\n  padding: 16px 24px;\n  text-align: center;\n  font-size: 16px;\n  line-height: 1;\n  font-weight: 500;\n  color: #fff;\n  user-select: none;\n  cursor: pointer;\n}\n\n.btn-large {\n  border-radius: 8px;\n  padding: 21px 32px;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.btn-primary {\n  background-color: #0070f0;\n}\n.btn-primary:hover {\n  background-color: #005dd6;\n}\n\n.btn-disabled {\n  background-color: #f2f2f2;\n  color: #a6a6a6;\n}\n.btn-disabled:hover {\n  background-color: #f2f2f2;\n}\n\n.dividerHorizontal {\n  border-radius: 50%;\n  width: 100%;\n  height: 1px;\n  background-color: #e5e5e5;\n}\n\n.formContent {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.formContent .fieldRow {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  width: 100%;\n}\n.formContent .fieldRow .textInputHalf:first-child {\n  margin-right: 12px;\n}\n.formContent .fieldRow .textInputHalf:last-child {\n  margin-left: 12px;\n}\n.formContent button {\n  outline: 0;\n  border: 0;\n  width: 100%;\n  max-width: 392px;\n}\n\n.textInputHalf {\n  max-width: 184px;\n}\n\n.textInputFull {\n  width: 100%;\n}\n\n.textInputHalf label,\n.textInputFull label {\n  color: #666;\n  padding-top: 0;\n  font-size: 14px;\n  line-height: 1.3;\n  font-weight: 500;\n}\n.textInputHalf input,\n.textInputFull input {\n  transition: all 0.3s ease-in-out;\n  margin-top: 6px;\n  border: solid 1px #d9d9d9;\n  border-radius: 4px;\n  width: 100%;\n  padding: 10px 16px;\n  font-size: 16px;\n  line-height: 1.25;\n  color: #0d0d0d;\n}\n.textInputHalf input:hover,\n.textInputFull input:hover {\n  border-color: #0070f0;\n}\n.textInputHalf input:focus,\n.textInputFull input:focus {\n  outline: none;\n  box-shadow: 0 0 0 4px rgba(0, 112, 240, 0.2);\n  border-color: #0070f0;\n}\n.textInputHalf input::placeholder,\n.textInputFull input::placeholder {\n  color: #a6a6a6;\n}\n\n.bookDemoForm {\n  display: flex;\n  justify-content: center;\n  margin-top: 160px;\n}\n.bookDemoForm .floatingPanel {\n  flex-grow: 1;\n  margin: 0 auto;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.1);\n  border: solid 1px #d9d9d9;\n  border-radius: 6px;\n  max-width: 100vw;\n  padding: 64px 40px;\n  background-color: #fff;\n}\n@media (max-width: 320px) {\n  .bookDemoForm .floatingPanel {\n    box-shadow: unset;\n    border: none;\n  }\n}\n.bookDemoForm .floatingPanel h5 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  text-align: center;\n  font-size: 28px;\n  line-height: 1.3;\n  font-weight: 600;\n}\n.bookDemoForm .floatingPanel p {\n  margin-top: 0;\n  margin-bottom: 24px;\n  text-align: center;\n  color: #666;\n}","$pt-divider-black: rgba(206, 212, 224, 0.8);\n\n$primary-blue: #0070f0;\n$dark-blue: #005dd6;\n$black: #0d0d0d;\n$grey: #666;\n","@import 'buttons';\n\n// Dividers\n\n.dividerHorizontal {\n  border-radius: 50%;\n  width: 100%;\n  height: 1px;\n  background-color: #e5e5e5;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]);
// Exports
___CSS_LOADER_EXPORT___.locals = {
	"btn": "EmailSignup_btn__1ScSb",
	"btn-large": "EmailSignup_btn-large__39pco",
	"btn-primary": "EmailSignup_btn-primary__2HhjF",
	"btn-disabled": "EmailSignup_btn-disabled__1ztqa",
	"dividerHorizontal": "EmailSignup_dividerHorizontal__2kLmV",
	"formContent": "EmailSignup_formContent__3sTBZ",
	"fieldRow": "EmailSignup_fieldRow__6Byn8",
	"textInputHalf": "EmailSignup_textInputHalf__1BPQV",
	"textInputFull": "EmailSignup_textInputFull__JCqRK",
	"bookDemoForm": "EmailSignup_bookDemoForm__bXP2f",
	"floatingPanel": "EmailSignup_floatingPanel__X8p5-"
};
module.exports = ___CSS_LOADER_EXPORT___;


/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,