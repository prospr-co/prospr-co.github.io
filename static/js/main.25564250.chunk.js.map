{"version":3,"sources":["components/material_icon_replay.svg","components/material_icon_done.svg","logo_with_text_blue.svg","product_image.png","components/EmailSignup.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","validateEmail","email","test","String","toLowerCase","components_EmailSignup","react_default","a","createElement","es","url","render","props","EmailSignup_EmailForm","EmailForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitEmail","subscribe","state","EMAIL","_this2","_this$props","status","message","console","warn","buttonContents","src","ReplayIcon","alt","className","DoneIcon","getSubmitButtonContents","type","placeholder","value","onChange","e","setState","target","classnames","email-cta-button","success","onClick","disabled","React","Component","App","logo","ProductImage","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6TCQlCC,SAAgB,SAACC,GAErB,MADW,yJACDC,KAAKC,OAAOF,GAAOG,iBAchBC,EAAA,kBACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,IAnBkB,mGAoBlBC,OAAQ,SAAAC,GAAK,OAAIN,EAAAC,EAAAC,cAACK,EAAcD,OAI9BE,cACJ,SAAAA,EAAYF,GAAO,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMN,KAMRU,YAAc,WAAM,IACVC,EAAcR,EAAKH,MAAnBW,UACAtB,EAAUc,EAAKS,MAAfvB,MACHA,GAAUsB,GAAcvB,EAAcC,IAC3CsB,EAAU,CAAEE,MAAOxB,KATnBc,EAAKS,MAAQ,CACXvB,MAAO,IAHQc,wEAcV,IAAAW,EAAAR,KAAAS,EACqBT,KAAKN,MAAzBgB,EADDD,EACCC,OAAQC,EADTF,EACSE,QACR5B,EAAUiB,KAAKM,MAAfvB,MACO,UAAX2B,GACFE,QAAQC,KAAKF,GAEf,IAAMG,EAvCsB,SAACJ,GAC/B,OAAQA,GACN,IAAK,UACH,OAAOtB,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAYC,IAAI,mBAAmBC,UAAU,oBAChE,IAAK,UACH,OAAO9B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKI,IAAUF,IAAI,oBACjC,QACE,MAAO,aAgCcG,CAAwBV,GAC/C,OACEtB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,uBACb9B,EAAAC,EAAAC,cAAA,SACE4B,UAAU,qBACVG,KAAK,OACLC,YAAY,2BACZC,MAAOxC,EACPyC,SAAU,SAAAC,GAAC,OAAIjB,EAAKkB,SAAS,CAAE3C,MAAO0C,EAAEE,OAAOJ,WAEjDnC,EAAAC,EAAAC,cAAA,UACE4B,UAAWU,IAAW,CAAEC,oBAAoB,EAAMC,QAAsB,YAAXpB,IAC7DqB,QAAS/B,KAAKI,YACd4B,SAAqB,YAAXtB,GAAmC,YAAXA,IAAyB5B,EAAcC,IAExE+B,WApCamB,IAAMC,6CCHfC,0LApBX,OACE/C,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,gBACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,YACb9B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKqB,IAAMnB,IAAI,SAASC,UAAU,UAEzC9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,yBACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,iBACb9B,EAAAC,EAAAC,cAAA,sEACAF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAACH,EAAD,OAEFC,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,2BACb9B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKsB,IAAcpB,IAAI,wCAdtBiB,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlD,OAAOL,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25564250.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/material_icon_replay.bd03c4bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/material_icon_done.0118de1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_with_text_blue.9c3e9882.svg\";","module.exports = __webpack_public_path__ + \"static/media/product_image.c9466b12.png\";","import React from 'react';\nimport MailchimpSubscribe from 'react-mailchimp-subscribe';\nimport classnames from 'classnames';\nimport ReplayIcon from './material_icon_replay.svg';\nimport DoneIcon from './material_icon_done.svg';\nimport './EmailSignup.scss';\n\nconst submissionUrl = 'https://prospr.us20.list-manage.com/subscribe/post?u=9dab57decf1f403a39802d493&amp;id=f1447540bf';\nconst validateEmail = (email) => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst getSubmitButtonContents = (status) => {\n  switch (status) {\n    case 'sending':\n      return <img src={ReplayIcon} alt=\"Submitting email\" className=\"loading-spinner\"/>;\n    case 'success':\n      return <img src={DoneIcon} alt=\"Email submitted\" />;\n    default:\n      return 'Subscribe'\n  }\n};\n\nexport default () => (\n  <MailchimpSubscribe\n    url={submissionUrl}\n    render={props => <EmailForm {...props} />}\n  />\n)\n\nclass EmailForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n    }\n  }\n\n  submitEmail = () => {\n    const { subscribe } = this.props;\n    const { email } = this.state;\n    if (!email || !subscribe || !validateEmail(email)) return;\n    subscribe({ EMAIL: email });\n  };\n\n  render() {\n    const { status, message } = this.props;\n    const { email } = this.state;\n    if (status === 'error') {\n      console.warn(message);\n    }\n    const buttonContents = getSubmitButtonContents(status);\n    return (\n      <div className=\"email-cta-container\">\n        <input\n          className=\"email-signup-field\"\n          type=\"text\"\n          placeholder=\"Enter your email address\"\n          value={email}\n          onChange={e => this.setState({ email: e.target.value })}\n        />\n        <button\n          className={classnames({ 'email-cta-button': true, 'success': status === 'success'})}\n          onClick={this.submitEmail}\n          disabled={status === 'success' || status === 'sending' || !validateEmail(email)}\n        >\n          {buttonContents}\n        </button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport EmailSignup from 'components/EmailSignup';\nimport logo from './logo_with_text_blue.svg';\nimport ProductImage from './product_image.png';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"landing-page\">\n        <div className=\"nav-area\">\n          <img src={logo} alt=\"Prospr\" className=\"logo\"/>\n        </div>\n        <div className=\"information-container\">\n          <div className=\"cta-container\">\n            <h2>Helping nonprofits mobilize and engage their communities</h2>\n            <p>Raise the funding you need, when you need it.</p>\n            <EmailSignup />\n          </div>\n          <div className=\"product-image-container\">\n            <img src={ProductImage} alt=\"Prospr champion dashboard\"/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}